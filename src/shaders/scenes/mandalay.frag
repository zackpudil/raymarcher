#version 330 core

out vec4 fragColor;

uniform vec2 resolution;
uniform float time;

uniform mat3 camera;
uniform vec3 eye;
uniform float fov;

const float tmax = 100.0;

float fold(vec3 p, float fo, float g) {
	if(p.z>p.y) p.yz = p.zy;

	vec2 v = p.xy - vec2(2, 4)*fo;

	float f = abs(max(v.x, v.y) + fo) - fo;
	f = min(f, max(v.x - g, p.y));

	return min(f, max(v.x + g, 2.0*fo - p.y));
}

void fold(inout vec3 p, vec3 fo, vec3 g) {
	vec3 q = p;
	p.x = fold(q, fo.x, g.x);
	p.y = fold(q.yzx, fo.y, g.y);
	p.z = fold(q.zxy, fo.z, g.z);
}

void rotate(inout vec2 p, float a) {
	float s = sin(a);
	float c = cos(a);

	p = mat2(c, s, -s, c)*p;
}

float cylinder(vec3 p, vec2 h) {
	vec2 d = abs(vec2(length(p.xy), p.z)) - h;
	return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float mr = 0.05;
float de(vec3 p) {
	vec4 q = vec4(p, 1);
	vec4 o = q;

	float d = 10000.0;

	for(int i = 0; i < 6; i++) {
		q.xyz = abs(q.xyz);
		fold(q.xyz, vec3(3), vec3(2));

		q *= clamp(1.0/dot(q.xyz, q.xyz), 1.0, 1.0/mr);
		q = q*(3.0) + o;

		d = min(d, (length(q.xz))/q.w);
	}

	return d - 0.01;
}

void cameraPath(inout vec3 p, inout vec3 d, float t) {
	if(t >= 0.000000 && t < 2.003335) {
		p = mix(vec3(-6.258072, 6.103697, -5.673536),vec3(-6.258072, 6.103697, -5.673536), abs(2.003335 - t)/2.0);
		d = mix(vec3(-0.174273, 0.292372, -0.940291),vec3(0.000000, 0.000000, -1.000000), abs(2.003335 - t)/2.0);
	} else if(t >= 2.003335 && t < 4.003699) {
		p = mix(vec3(-6.037483, 6.356017, -6.727018),vec3(-6.258072, 6.103697, -5.673536), abs(4.003699 - t)/2.0);
		d = mix(vec3(0.752383, 0.078459, -0.654037),vec3(-0.174273, 0.292372, -0.940291), abs(4.003699 - t)/2.0);
	} else if(t >= 4.003699 && t < 6.023067) {
		p = mix(vec3(-5.066540, 6.364550, -6.272530),vec3(-6.037483, 6.356017, -6.727018), abs(6.023067 - t)/2.0);
		d = mix(vec3(0.373452, 0.078459, 0.924326),vec3(0.752383, 0.078459, -0.654037), abs(6.023067 - t)/2.0);
	} else if(t >= 6.023067 && t < 8.036678) {
		p = mix(vec3(-4.982859, 6.383892, -5.069610),vec3(-5.066540, 6.364550, -6.272530), abs(8.036678 - t)/2.0);
		d = mix(vec3(-0.139173, 0.000000, 0.990268),vec3(0.373452, 0.078459, 0.924326), abs(8.036678 - t)/2.0);
	} else if(t >= 8.036678 && t < 10.037921) {
		p = mix(vec3(-5.113511, 6.374799, -3.875911),vec3(-4.982859, 6.383892, -5.069610), abs(10.037921 - t)/2.0);
		d = mix(vec3(-0.224942, 0.008727, 0.974333),vec3(-0.139173, 0.000000, 0.990268), abs(10.037921 - t)/2.0);
	} else if(t >= 10.037921 && t < 12.054165) {
		p = mix(vec3(-6.102748, 6.348880, -3.273188),vec3(-5.113511, 6.374799, -3.875911), abs(12.054165 - t)/2.0);
		d = mix(vec3(-0.957506, -0.052336, 0.283626),vec3(-0.224942, 0.008727, 0.974333), abs(12.054165 - t)/2.0);
	} else if(t >= 12.054165 && t < 14.056013) {
		p = mix(vec3(-7.336804, 6.266614, -2.862630),vec3(-6.102748, 6.348880, -3.273188), abs(14.056013 - t)/2.0);
		d = mix(vec3(-0.034898, 0.008727, 0.999353),vec3(-0.957506, -0.052336, 0.283626), abs(14.056013 - t)/2.0);
	} else if(t >= 14.056013 && t < 16.091650) {
		p = mix(vec3(-6.947423, 6.319833, -1.785060),vec3(-7.336804, 6.266614, -2.862630), abs(16.091650 - t)/2.0);
		d = mix(vec3(0.870356, 0.000000, 0.492424),vec3(-0.034898, 0.008727, 0.999353), abs(16.091650 - t)/2.0);
	} else if(t >= 16.091650 && t < 18.105558) {
		p = mix(vec3(-6.172923, 6.357587, -0.954948),vec3(-6.947423, 6.319833, -1.785060), abs(18.105558 - t)/2.0);
		d = mix(vec3(0.229420, 0.317305, 0.920154),vec3(0.870356, 0.000000, 0.492424), abs(18.105558 - t)/2.0);
	} else if(t >= 18.105558 && t < 20.109715) {
		p = mix(vec3(-5.767475, 6.616622, 0.113234),vec3(-6.172923, 6.357587, -0.954948), abs(20.109715 - t)/2.0);
		d = mix(vec3(0.559108, 0.017452, 0.828911),vec3(0.229420, 0.317305, 0.920154), abs(20.109715 - t)/2.0);
	} else if(t >= 20.109715 && t < 22.122225) {
		p = mix(vec3(-5.343576, 6.462592, 1.199955),vec3(-5.767475, 6.616622, 0.113234), abs(22.122225 - t)/2.0);
		d = mix(vec3(-0.115230, -0.325568, 0.938471),vec3(0.559108, 0.017452, 0.828911), abs(22.122225 - t)/2.0);
	} else if(t >= 22.122225 && t < 24.122683) {
		p = mix(vec3(-5.538957, 6.165891, 2.339730),vec3(-5.343576, 6.462592, 1.199955), abs(24.122683 - t)/2.0);
		d = mix(vec3(-0.060900, -0.069756, 0.995703),vec3(-0.115230, -0.325568, 0.938471), abs(24.122683 - t)/2.0);
	} else if(t >= 24.122683 && t < 26.123337) {
		p = mix(vec3(-5.566957, 6.130110, 3.538656),vec3(-5.538957, 6.165891, 2.339730), abs(26.123337 - t)/2.0);
		d = mix(vec3(-0.000000, -0.017452, 0.999848),vec3(-0.060900, -0.069756, 0.995703), abs(26.123337 - t)/2.0);
	} else if(t >= 26.123337 && t < 28.142025) {
		p = mix(vec3(-5.561893, 6.130210, 4.738998),vec3(-5.566957, 6.130110, 3.538656), abs(28.142025 - t)/2.0);
		d = mix(vec3(0.034767, 0.087156, 0.995588),vec3(-0.000000, -0.017452, 0.999848), abs(28.142025 - t)/2.0);
	} else if(t >= 28.142025 && t < 30.157028) {
		p = mix(vec3(-5.123824, 6.229874, 5.851308),vec3(-5.561893, 6.130210, 4.738998), abs(30.157028 - t)/2.0);
		d = mix(vec3(0.377972, -0.156434, 0.912505),vec3(0.034767, 0.087156, 0.995588), abs(30.157028 - t)/2.0);
	} else if(t >= 30.157028 && t < 32.157410) {
		p = mix(vec3(-5.781468, 5.617263, 6.657141),vec3(-5.123824, 6.229874, 5.851308), abs(32.157410 - t)/2.0);
		d = mix(vec3(-0.305101, -0.777146, -0.550416),vec3(0.377972, -0.156434, 0.912505), abs(32.157410 - t)/2.0);
	} else if(t >= 32.157410 && t < 34.174820) {
		p = mix(vec3(-5.823823, 4.292201, 6.492026),vec3(-5.781468, 5.617263, 6.657141), abs(34.174820 - t)/2.0);
		d = mix(vec3(-0.060824, -0.843391, -0.533846),vec3(-0.305101, -0.777146, -0.550416), abs(34.174820 - t)/2.0);
	} else if(t >= 34.174820 && t < 36.191586) {
		p = mix(vec3(-5.780799, 2.620525, 6.857077),vec3(-5.823823, 4.292201, 6.492026), abs(36.191586 - t)/2.0);
		d = mix(vec3(-0.059206, -0.824126, -0.563303),vec3(-0.060824, -0.843391, -0.533846), abs(36.191586 - t)/2.0);
	} else if(t >= 36.191586 && t < 38.207531) {
		p = mix(vec3(-5.786791, 1.123711, 6.727115),vec3(-5.780799, 2.620525, 6.857077), abs(38.207531 - t)/2.0);
		d = mix(vec3(-0.036683, -0.713250, -0.699949),vec3(-0.059206, -0.824126, -0.563303), abs(38.207531 - t)/2.0);
	} else if(t >= 38.207531 && t < 40.208973) {
		p = mix(vec3(-5.789744, -0.569180, 6.641534),vec3(-5.786791, 1.123711, 6.727115), abs(40.208973 - t)/2.0);
		d = mix(vec3(-0.028412, -0.580703, -0.813620),vec3(-0.036683, -0.713250, -0.699949), abs(40.208973 - t)/2.0);
	} else if(t >= 40.208973 && t < 42.209007) {
		p = mix(vec3(-5.799641, -2.227500, 6.286414),vec3(-5.789744, -0.569180, 6.641534), abs(42.209007 - t)/2.0);
		d = mix(vec3(-0.037965, -0.492424, -0.869527),vec3(-0.028412, -0.580703, -0.813620), abs(42.209007 - t)/2.0);
	} else if(t >= 42.209007 && t < 44.226059) {
		p = mix(vec3(-6.036280, -2.969772, 5.298548),vec3(-5.799641, -2.227500, 6.286414), abs(44.226059 - t)/2.0);
		d = mix(vec3(-0.220055, -0.333807, -0.916596),vec3(-0.037965, -0.492424, -0.869527), abs(44.226059 - t)/2.0);
	} else if(t >= 44.226059 && t < 46.242928) {
		p = mix(vec3(-6.104340, -2.957659, 4.101984),vec3(-6.036280, -2.969772, 5.298548), abs(46.242928 - t)/2.0);
		d = mix(vec3(0.060935, 0.061049, -0.996273),vec3(-0.220055, -0.333807, -0.916596), abs(46.242928 - t)/2.0);
	} else if(t >= 46.242928 && t < 48.279167) {
		p = mix(vec3(-6.093808, -2.952662, 3.902747),vec3(-6.104340, -2.957659, 4.101984), abs(48.279167 - t)/2.0);
		d = mix(vec3(-0.701307, -0.182236, -0.689173),vec3(0.060935, 0.061049, -0.996273), abs(48.279167 - t)/2.0);
	}
}

void main() {
	vec2 p = -2.0 + 4.0*(gl_FragCoord.xy/resolution);
	p.x *= resolution.x/resolution.y;

	vec3 hack1 = eye;
	mat3 hack2 = camera;
	float hack3 = fov;
	float hack4 = time;

	vec3 ro = eye;
	//vec3 ro = vec3(-6.258072, 6.103697, -5.673536);
	vec3 ww = vec3(0.000000, 0.000000, -1.000000);

	//cameraPath(ro, ww, time);
	ww = normalize(ww);
	vec3 uu = normalize(cross(vec3(0, 1, 0), ww));
	vec3 vv = normalize(cross(ww, uu));
	//vec3 rd = normalize(p.x*uu + p.y*vv + 1.97*ww);
	vec3 rd = normalize(camera*vec3(p, fov));

	float t = 0.0;
	for(int i = 0; i < 300; i++) {
		float d = de(ro + rd*t);
		if(abs(d) < 0.001*t || t >= tmax) break;
		t += d*0.75;
	}

	vec3 col = vec3(0);

	if(t < tmax) {
		vec3 pos = ro + rd*t;
		vec2 h = vec2(0.001, 0.0);
		vec3 nor = normalize(vec3(
			de(pos + h.xyy) - de(pos - h.xyy),
			de(pos + h.yxy) - de(pos - h.yxy),
			de(pos + h.yyx) - de(pos - h.yyx)
		));

		float s = 0.01;
		float o = 0.0;
		for(int i = 0; i < 10; i++) {
			float d = de(pos + nor*s);
			o += (s - d);
			s += 0.01;
		}

		col = vec3(1.0 - clamp(o, 0.0, 1.0));
	}

	col = mix(col, vec3(0), 1.0 - exp(-0.4*t));
	col = pow(col, vec3(.454545));

	fragColor = vec4(col, 1);
}